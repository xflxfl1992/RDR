///////////////////////////////////////////////////////////////////////////////////
// 严正声明：
//        1. 本程序属于任明武个人开发，不经授权，不得用于商业目的及应用软件中     
//        2. 由于本程序是个人开发的，不可避免地存在各种各样的缺陷或错误，所以本程序
// 最好仅仅应用于科研研究和教学中。
//        3. 若将本程序应用在实际领域时，由其导致的各种不良后果，本人概不负责。
//        4. 如果你分发该文件，请保留这些文字
//
///////////////////////////////////////////////////////////////////////////////////
#ifndef RMW_LIDAR_STRUCT_H
#define RMW_LIDAR_STRUCT_H

////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  设置对齐方式
//
////////////////////////////////////////////////////////////////////////////////////////////////
#pragma pack(push) //保存对齐状态
#pragma pack(1)    //按1字节对齐,必须放在第一句

////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  雷达定义
//
////////////////////////////////////////////////////////////////////////////////////////////////
#define MAX_LIDAR_SCANL_LINE_NUM        64 //64线
#define MAX_LIDAR_POINT_NUM_PER_LINE  2500 //每条线最多2500个点
#define MAX_LIDAR_MAX_POINT_NUM       (MAX_LIDAR_SCANL_LINE_NUM*MAX_LIDAR_POINT_NUM_PER_LINE) //1帧最多的点数
////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  原始数据结构
//
////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct tagRMW_LIDAR_3D_POINT_ORG
{
	int scanLineID;	//扫描线ID,[0,63],由近到远距离,0-最近,63-最远.
	int pointID; //在扫描线中的点顺序号,由左到右,0-最左.
	int x;//单位cm
	int y;//单位cm
	int z;//单位cm
	int d;//单位cm(边心距,Range Image)
	int intense; //回波强度
}RMW_LIDAR_3D_POINT_ORG;

////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  结果数据结构
//
////////////////////////////////////////////////////////////////////////////////////////////////
//Y差值
#define RMW_3D_POINT_DIF_Y_IS_INVALID        (1<<30)    //与上下行的差值无效
//障碍类型
#define RMW_3D_POINT_TYPE_IS_OBSTACLE        255       //障碍
#define RMW_3D_POINT_TYPE_IS_NORMAL          254       //正常
#define RMW_3D_POINT_TYPE_IS_UNKNOWN         0         //未知
//结果数据:是按照scanLineID和pointID顺序存放的
typedef struct tagRMW_LIDAR_COORD_3D_RES
{
    RMW_LIDAR_3D_POINT_ORG orgData;
	int gridX; //在栅格中的坐标X
	int gridY; //在栅格中的坐标Y
	int preDifyCM; //与上一行的Y差值,RMW_3D_POINT_DIF_Y_IS_INVALID时无效
	int nxtDifyCM; //与下一行的Y差值,RMW_3D_POINT_DIF_Y_IS_INVALID时无效
	int obstacleType; //障碍类型,255-障碍,254-正常,0-未知
	int passableScore; //可通行区域得分
}RMW_LIDAR_3D_POINT_RES;

////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  障碍数据结构
//
////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct tagRMW_LIDAR_3D_OBSTACLE
{   //雷达坐标系中的障碍
	//1.编号
	int scanLineID;
	int pointIDbegin;
	int pointIDend;
	//2.位置,单位cm
	int	x1,x2;
	int deltay;
	//3.面积,单位cm2
	double S;
	//4.栅格位置
	int gridX1;
	int gridX2;
	int gridY1;
	int gridY2;
}RMW_LIDAR_3D_OBSTACLE;
  
typedef struct tagRMW_LIDAR_2D_OBSTACLE
{   //图像坐标系中的障碍

	//1.外接矩形
	int	x1,x2;
	int y1,y2;
	//2.面积周长
	double S;
	double P;
 	//3.四边形描述
	int px[4];
	int py[4];
	//4.尺寸
	int w; //障碍宽度,图像坐标系中
	int h; //障碍高度,图像坐标系中
}RMW_LIDAR_2D_OBSTACLE;
////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  恢复对齐状态
//
////////////////////////////////////////////////////////////////////////////////////////////////
#pragma pack(pop)

#endif

////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C), 2015, 南京理工大学计算机科学与工程学院, 智能科学与技术系
//  FileName:  NJUST_3DESR_data.h
//  Author: 蔡云飞
//  Date:   2015.11.3
//  Description: 3DESR毫米波模块的数据定义
//
////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _NJUST_3DESR_DATA_H_
#define _NJUST_3DESR_DATA_H_

#include "NJUST_Global_Def.h"
#include "NJUST_IP_comm.h"

////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  设置对齐方式
//
////////////////////////////////////////////////////////////////////////////////////////////////
#pragma pack(push) //保存对齐状态
#pragma pack(1)    //按1字节对齐,必须放在第一句

////////////////////////////////////////////////////////////////////////////////////////////
//
//  常量定义
//
////////////////////////////////////////////////////////////////////////////////////////////
#define NJUST_3DESR_MAX_OBS_NUM		              20             //障碍物的最大个数
////////////////////////////////////////////////////////////////////////////////////////////
//
//  类型定义
//
////////////////////////////////////////////////////////////////////////////////////////////
//障碍物结构体
struct NJUST_3DESR_OBS_DATA  
{
	unsigned int          OBSID;                                  //障碍物ID
	int                   x_cm;                                   //障碍物x坐标,单位:cm
	int                   y_cm;                                   //障碍物y坐标,单位:cm 
    int                   fbSpeed_cmps;                           //障碍物的前后方向上的速度分量,单位:cm/s
	int                   lrSpeed_cmps;                           //障碍物的左右方向上的速度分量,单位:cm/s
};
////////////////////////////////////////////////////////////////////////////////////////////
//
//  3D给融合模块的障碍数据
//
////////////////////////////////////////////////////////////////////////////////////////////
typedef struct NJUST_3DESR_OBS                              
{
	int                    frameID;                               //帧ID(从0开始)
	NJUST_IP_TIME          synTime;                               //时间戳
	unsigned int           navID;                                 //与图像获取时间最接近的导航数据编号(从0开始)
	NJUST_3DESR_OBS_DATA   pObj[NJUST_3DESR_MAX_OBS_NUM];         //障碍物数组
	int                    nObj;                                  //障碍物有效数量
	int                    nSize;                                 //该结构体的大小
	unsigned char          checksum;                              //检查和:以上数据之和
}NJUST_3DESR_OBS_TO_FU;

////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  恢复对齐方式
//
////////////////////////////////////////////////////////////////////////////////////////////////
#pragma pack(pop)//恢复对齐状态

#endif
